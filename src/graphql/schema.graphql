type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input createGameInput {
  data: GameInput
}

type createGamePayload {
  game: Games
}

input createGenreInput {
  data: GenreInput
}

type createGenrePayload {
  genre: Genres
}

input createPlatformInput {
  data: PlatformInput
}

type createPlatformPayload {
  platform: Platform
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

# A date string, such as 2007-12-03, compliant with the `full-date` format
# outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
# representation of dates and times using the Gregorian calendar.
scalar Date

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
# `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
# 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteGameInput {
  where: InputID
}

type deleteGamePayload {
  game: Games
}

input deleteGenreInput {
  where: InputID
}

type deleteGenrePayload {
  genre: Genres
}

input deletePlatformInput {
  where: InputID
}

type deletePlatformPayload {
  platform: Platform
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editGameInput {
  title: String
  description: String
  picture: ID
  genres: [ID]
  platform: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editGenreInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPlatformInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input GameInput {
  title: String
  description: String
  picture: ID
  genres: [ID]
  platform: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Games {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  description: String
  picture: UploadFile
  platform: Platform
  published_at: DateTime
  genres(sort: String, limit: Int, start: Int, where: JSON): [Genres]
}

type GamesAggregator {
  count: Int
  totalCount: Int
}

type GamesConnection {
  values: [Games]
  groupBy: GamesGroupBy
  aggregate: GamesAggregator
}

type GamesConnection_id {
  key: ID
  connection: GamesConnection
}

type GamesConnectionCreatedAt {
  key: DateTime
  connection: GamesConnection
}

type GamesConnectionDescription {
  key: String
  connection: GamesConnection
}

type GamesConnectionId {
  key: ID
  connection: GamesConnection
}

type GamesConnectionPicture {
  key: ID
  connection: GamesConnection
}

type GamesConnectionPlatform {
  key: ID
  connection: GamesConnection
}

type GamesConnectionPublished_at {
  key: DateTime
  connection: GamesConnection
}

type GamesConnectionTitle {
  key: String
  connection: GamesConnection
}

type GamesConnectionUpdatedAt {
  key: DateTime
  connection: GamesConnection
}

type GamesGroupBy {
  id: [GamesConnectionId]
  _id: [GamesConnection_id]
  createdAt: [GamesConnectionCreatedAt]
  updatedAt: [GamesConnectionUpdatedAt]
  title: [GamesConnectionTitle]
  description: [GamesConnectionDescription]
  picture: [GamesConnectionPicture]
  platform: [GamesConnectionPlatform]
  published_at: [GamesConnectionPublished_at]
}

input GenreInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Genres {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  published_at: DateTime
}

type GenresAggregator {
  count: Int
  totalCount: Int
}

type GenresConnection {
  values: [Genres]
  groupBy: GenresGroupBy
  aggregate: GenresAggregator
}

type GenresConnection_id {
  key: ID
  connection: GenresConnection
}

type GenresConnectionCreatedAt {
  key: DateTime
  connection: GenresConnection
}

type GenresConnectionId {
  key: ID
  connection: GenresConnection
}

type GenresConnectionPublished_at {
  key: DateTime
  connection: GenresConnection
}

type GenresConnectionTitle {
  key: String
  connection: GenresConnection
}

type GenresConnectionUpdatedAt {
  key: DateTime
  connection: GenresConnection
}

type GenresGroupBy {
  id: [GenresConnectionId]
  _id: [GenresConnection_id]
  createdAt: [GenresConnectionCreatedAt]
  updatedAt: [GenresConnectionUpdatedAt]
  title: [GenresConnectionTitle]
  published_at: [GenresConnectionPublished_at]
}

input InputID {
  id: ID!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# The `Long` scalar type represents 52-bit integers
scalar Long

union Morph =
    UsersPermissionsMe
  | UsersPermissionsMeRole
  | UsersPermissionsLoginPayload
  | UserPermissionsPasswordPayload
  | Games
  | GamesConnection
  | GamesAggregator
  | GamesGroupBy
  | GamesConnectionId
  | GamesConnection_id
  | GamesConnectionCreatedAt
  | GamesConnectionUpdatedAt
  | GamesConnectionTitle
  | GamesConnectionDescription
  | GamesConnectionPicture
  | GamesConnectionPlatform
  | GamesConnectionPublished_at
  | createGamePayload
  | updateGamePayload
  | deleteGamePayload
  | Genres
  | GenresConnection
  | GenresAggregator
  | GenresGroupBy
  | GenresConnectionId
  | GenresConnection_id
  | GenresConnectionCreatedAt
  | GenresConnectionUpdatedAt
  | GenresConnectionTitle
  | GenresConnectionPublished_at
  | createGenrePayload
  | updateGenrePayload
  | deleteGenrePayload
  | Platform
  | PlatformConnection
  | PlatformAggregator
  | PlatformGroupBy
  | PlatformConnectionId
  | PlatformConnection_id
  | PlatformConnectionCreatedAt
  | PlatformConnectionUpdatedAt
  | PlatformConnectionTitle
  | PlatformConnectionPublished_at
  | createPlatformPayload
  | updatePlatformPayload
  | deletePlatformPayload
  | UploadFile
  | UploadFileConnection
  | UploadFileAggregator
  | UploadFileAggregatorSum
  | UploadFileAggregatorAvg
  | UploadFileAggregatorMin
  | UploadFileAggregatorMax
  | UploadFileGroupBy
  | UploadFileConnectionId
  | UploadFileConnection_id
  | UploadFileConnectionCreatedAt
  | UploadFileConnectionUpdatedAt
  | UploadFileConnectionName
  | UploadFileConnectionAlternativeText
  | UploadFileConnectionCaption
  | UploadFileConnectionWidth
  | UploadFileConnectionHeight
  | UploadFileConnectionFormats
  | UploadFileConnectionHash
  | UploadFileConnectionExt
  | UploadFileConnectionMime
  | UploadFileConnectionSize
  | UploadFileConnectionUrl
  | UploadFileConnectionPreviewUrl
  | UploadFileConnectionProvider
  | UploadFileConnectionProvider_metadata
  | deleteFilePayload
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsRoleConnection
  | UsersPermissionsRoleAggregator
  | UsersPermissionsRoleGroupBy
  | UsersPermissionsRoleConnectionId
  | UsersPermissionsRoleConnection_id
  | UsersPermissionsRoleConnectionName
  | UsersPermissionsRoleConnectionDescription
  | UsersPermissionsRoleConnectionType
  | createRolePayload
  | updateRolePayload
  | deleteRolePayload
  | UsersPermissionsUser
  | UsersPermissionsUserConnection
  | UsersPermissionsUserAggregator
  | UsersPermissionsUserGroupBy
  | UsersPermissionsUserConnectionId
  | UsersPermissionsUserConnection_id
  | UsersPermissionsUserConnectionCreatedAt
  | UsersPermissionsUserConnectionUpdatedAt
  | UsersPermissionsUserConnectionUsername
  | UsersPermissionsUserConnectionEmail
  | UsersPermissionsUserConnectionProvider
  | UsersPermissionsUserConnectionConfirmed
  | UsersPermissionsUserConnectionBlocked
  | UsersPermissionsUserConnectionRole
  | createUserPayload
  | updateUserPayload
  | deleteUserPayload

type Mutation {
  createGame(input: createGameInput): createGamePayload
  updateGame(input: updateGameInput): updateGamePayload
  deleteGame(input: deleteGameInput): deleteGamePayload
  createGenre(input: createGenreInput): createGenrePayload
  updateGenre(input: updateGenreInput): updateGenrePayload
  deleteGenre(input: deleteGenreInput): deleteGenrePayload
  createPlatform(input: createPlatformInput): createPlatformPayload
  updatePlatform(input: updatePlatformInput): updatePlatformPayload
  deletePlatform(input: deletePlatformInput): deletePlatformPayload

  # Delete one file
  deleteFile(input: deleteFileInput): deleteFilePayload

  # Create a new role
  createRole(input: createRoleInput): createRolePayload

  # Update an existing role
  updateRole(input: updateRoleInput): updateRolePayload

  # Delete an existing role
  deleteRole(input: deleteRoleInput): deleteRolePayload

  # Create a new user
  createUser(input: createUserInput): createUserPayload

  # Update an existing user
  updateUser(input: updateUserInput): updateUserPayload

  # Delete an existing user
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(
    refId: ID
    ref: String
    field: String
    source: String
    file: Upload!
  ): UploadFile!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    source: String
    files: [Upload]!
  ): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Platform {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  published_at: DateTime
}

type PlatformAggregator {
  count: Int
  totalCount: Int
}

type PlatformConnection {
  values: [Platform]
  groupBy: PlatformGroupBy
  aggregate: PlatformAggregator
}

type PlatformConnection_id {
  key: ID
  connection: PlatformConnection
}

type PlatformConnectionCreatedAt {
  key: DateTime
  connection: PlatformConnection
}

type PlatformConnectionId {
  key: ID
  connection: PlatformConnection
}

type PlatformConnectionPublished_at {
  key: DateTime
  connection: PlatformConnection
}

type PlatformConnectionTitle {
  key: String
  connection: PlatformConnection
}

type PlatformConnectionUpdatedAt {
  key: DateTime
  connection: PlatformConnection
}

type PlatformGroupBy {
  id: [PlatformConnectionId]
  _id: [PlatformConnection_id]
  createdAt: [PlatformConnectionCreatedAt]
  updatedAt: [PlatformConnectionUpdatedAt]
  title: [PlatformConnectionTitle]
  published_at: [PlatformConnectionPublished_at]
}

input PlatformInput {
  title: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  game(id: ID!, publicationState: PublicationState): Games
  games(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Games]
  gamesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): GamesConnection
  genre(id: ID!, publicationState: PublicationState): Genres
  genres(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Genres]
  genresConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): GenresConnection
  platform(id: ID!, publicationState: PublicationState): Platform
  platforms(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [Platform]
  platformsConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): PlatformConnection
  files(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UploadFile]
  filesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  # Retrieve all the existing roles. You can't apply filters on this query.
  roles(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsRole]
  rolesConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
    publicationState: PublicationState
  ): [UsersPermissionsUser]
  usersConnection(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

# A time string with format: HH:mm:ss.SSS
scalar Time

input updateGameInput {
  where: InputID
  data: editGameInput
}

type updateGamePayload {
  game: Games
}

input updateGenreInput {
  where: InputID
  data: editGenreInput
}

type updateGenrePayload {
  genre: Genres
}

input updatePlatformInput {
  where: InputID
  data: editPlatformInput
}

type updatePlatformPayload {
  platform: Platform
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsPermission]
  users(
    sort: String
    limit: Int
    start: Int
    where: JSON
  ): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
